import telebot
from telebot import types
import requests

BOT_TOKEN = '<API –¢–û–ö–ï–ù –ë–û–¢–ê>' # —Ç—É—Ç –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)


def get_my_content(url):
    try:
        user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'
        headers = {'User-Agent': user_agent}
        return requests.get(url, headers=headers)
    except:
        return False


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == '/start':
        try:
            bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ –ë–∏–∫—Ç–æ–∏–Ω–∞.', reply_markup = keyboard())
        except:
            pass
    else:
        try:
            bot.send_message(message.from_user.id, '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...')
        except:
            pass
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ–±—ã—á–∏ –±–ª–æ–∫–∞.
        time_info = get_my_content(url='https://blockchain.info/q/interval')
        if time_info and time_info.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –¥–æ–±—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤.
            block_info = get_my_content(url='https://blockchain.info/q/getblockcount')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø.
            if block_info and block_info.status_code == 200 and block_info.text.isdigit():
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–ª–æ–∫–æ–≤.
                blocks_left = 210000 - (int(block_info.text) % 210000)
                # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
                raw_seconds = float(time_info.text) * blocks_left
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏.
                days_left = int(raw_seconds / 86400)
                # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—ã.
                hours_left = int(raw_seconds / 3600) - days_left * 24
                # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω—É—Ç—ã.
                minutes_left = int(raw_seconds / 60) - hours_left * 60 - days_left * 1440
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã.
                seconds_left = int(raw_seconds) - minutes_left * 60 - hours_left * 3600 - days_left * 86400
                try:
                    bot.send_message(message.from_user.id, f'üì¶ –ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞: {blocks_left}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏\n–î–Ω–µ–π: {days_left:02}\n–ß–∞—Å–æ–≤: {hours_left:02}\n–ú–∏–Ω—É—Ç: {minutes_left:02}\n–°–µ–∫—É–Ω–¥: {seconds_left:02}', reply_markup = keyboard())
                except:
                    pass
            else:
                try:
                    bot.send_message(message.from_user.id, '–û–π. –ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å —Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å üò≠')
                except:
                    pass
        else:
            bot.send_message(message.from_user.id, '–û–π. –Ø –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ–±—ã—á–∏ –±–ª–æ–∫–∞ üò≠')


def keyboard():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn1 = types.KeyboardButton('‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    markup.add(btn1)
    return markup


if __name__ == "__main__":
    try:
        bot.polling(none_stop=True, interval=0)
        print('start - ok')
    except:
        print('start - error')
